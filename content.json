{"meta":{"title":"4riH04X","subtitle":"击碎你沉睡的灵魂！","description":"For Study","author":"4riH04X","url":"http://example.com","root":"/"},"pages":[{"title":"404","text":"","path":"404/index.html","date":"11-02","excerpt":""},{"title":"search","text":"","path":"search/index.html","date":"11-02","excerpt":""},{"title":"categories","text":"","path":"categories/index.html","date":"11-02","excerpt":""},{"title":"about","text":"","path":"about/index.html","date":"11-02","excerpt":""}],"posts":[{"title":"My first Boke","text":"我是大蠢蛋，我爱吃狗屎 栈介绍 ¶基本栈介绍 ¶栈是一种典型的后进先出 (Last in First Out) 的数据结构，其操作主要有压栈 (push) 与出栈 (pop) 两种操作，如下图所示（维基百科）。两种操作都操作栈顶，当然，它也有栈底。 高级语言在运行时都会被转换为汇编程序，在汇编程序运行过程中，充分利用了这一数据结构。每个程序在运行时都有虚拟地址空间，其中某一部分就是该程序对应的栈，用于保存函数调用信息和局部变量。此外，常见的操作也是压栈与出栈。需要注意的是，程序的栈是从进程地址空间的高地址向低地址增长的。 函数调用栈 ¶请务必仔细看一下下面的文章来学习一下基本的函数调用栈。 C 语言函数调用栈 (一) C 语言函数调用栈 (二) 这里再给出另外一张寄存器的图 需要注意的是，32 位和 64 位程序有以下简单的区别 x86 函数参数在函数返回地址的上方 x64 System V AMD64 ABI (Linux、FreeBSD、macOS 等采用) 中前六个整型或指针参数依次保存在 RDI, RSI, RDX, RCX, R8 和 R9 寄存器中，如果还有更多的参数的话才会保存在栈上。 内存地址不能大于 0x00007FFFFFFFFFFF，6 个字节长度，否则会抛出异常。 参考阅读 ¶ csapp Calling conventions for different C++ compilers and operating systems, Agner Fog 上一页 Environment下一页 栈溢出原理 Copyright © 2016 - 2023 CTF Wiki Team Made with [Material for MkDocs Insiders](","path":"My-first-Boke/","date":"11-02","excerpt":"","tags":[{"name":"学习","slug":"学习","permalink":"http://example.com/tags/%E5%AD%A6%E4%B9%A0/"}]},{"title":"pagetags","text":"","path":"pagetags/","date":"11-02","excerpt":"","tags":[]},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","path":"hello-world/","date":"11-02","excerpt":"","tags":[]}],"categories":[],"tags":[{"name":"学习","slug":"学习","permalink":"http://example.com/tags/%E5%AD%A6%E4%B9%A0/"}]}